<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/29/js%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/01/29/js%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><p>一、面向对象编程 (OOP)<br>  把功能事务分解成一个个对象，通过对象之间的分工合作来完成</p><p>  ex: 把大象放进冰箱<br>  面向对象：1. 大象（走进去） 2. 冰箱（开关门）</p><p>  ex: 小明今天买了一本书<br>  面向对象: 1. 小明 2. 书</p><p>二、面向对象 [高内聚, 低耦合]  vs 面向过程<br>  面向对象：易于维护、拓展，耦合性低；适用场景：多人合作的复杂项目<br>  面向过程：不易于维护、拓展，耦合性高；适用场景：简单的功能模块</p><p>三、面向对象的三个特性</p><pre><code>1. 封装性：把公共的特征提取出来，封装在一个模板中2. 继承性：类进行实例化，得到的具体的对象3. 多态性：生成多个对象</code></pre><h2 id="ES6-中使用-class-声明创建一个基于原型继承的具有指定名称的类"><a href="#ES6-中使用-class-声明创建一个基于原型继承的具有指定名称的类" class="headerlink" title="ES6 中使用 class 声明创建一个基于原型继承的具有指定名称的类"></a>ES6 中使用 class 声明创建一个基于原型继承的具有指定名称的类</h2><p>​    一、如何定义一个类</p><p>​      class 类名 {</p><p>​        // 构造函数: 定义公共的属性</p><p>​        constructor (参数) { </p><p>​          this.属性名 = 属性值</p><p>​        }</p><p>​        // 类方法: 定义公共的行为</p><p>​        方法名1 (参数) {  }</p><p>​        方法名2 (参数) {  }</p><p>​      }</p><p>​     </p><p>​     二、注意要点</p><p>​      1. class 创建的类首字母还是要大写</p><p>​      2. 类中的 constructor 构造函数, 接收 new 创建对象传递的参数，并返回实例对象（return this）</p><p>​      3. new 一个类时，自动调用构造函数方法，但不会自动调用类方法</p><p>​      4. 类中的构造函数 和 类方法不需要加 function （重点）</p><p>​      5. 多个类方法之间不需要使用逗号隔开 (重点)</p><p>​     三、大括号总结</p><p>​      1. 函数体 fn () {}</p><p>​      2. 定义对象 var obj = {}</p><p>​      3. 条件语法 if () {}</p><ol start="4"><li><p>定义一个类 class 类名 {}</p></li><li><p>使用类的两个注意事项</p><p>​      (1) 声明 class 类不存在变量提升，先定义再使用</p><p>​      (2)在类中访问属性和方法，必须加 this</p></li></ol><h2 id="extends和super"><a href="#extends和super" class="headerlink" title="extends和super"></a>extends和super</h2><p>​    1. 定义一个类（子类）通过 extends 继承父类上的方法和属性</p><p>​    class 子类名 extends 父类 {}</p><p>​    2. super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</p><p>​    注意：</p><p>​    （1）子类调用方法时的查找顺序：先从子类上找再从父类上找</p><p>​    （2）super 作为一个函数，可以调用父类的构造函数；作为一个对象，可以调用父类的方法</p><h2 id="类中this指向问题"><a href="#类中this指向问题" class="headerlink" title="类中this指向问题"></a>类中this指向问题</h2><p>1.非函数作用域中始终指向window</p><p>2.函作用域中始终指向调用者</p><h2 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h2><ol><li>实例成员: 只能通过实例对象才能访问的属性或方法</li></ol><ol start="2"><li>静态成员: 只能通过构造函数本身才能访问的属性或方法</li></ol><h2 id="构造函数原型"><a href="#构造函数原型" class="headerlink" title="构造函数原型"></a>构造函数原型</h2><p>​    一、构造函数中直接添加方法的缺点</p><p>​      每次创建对象，要重复开辟内存空间，浪费资源 </p><p>​    二、构造函数的原型 prototype</p><ol><li>每个函数默认都有一个 prototype 属性, 它的值默认是一个对象</li></ol><p>​      2. 在 prototype 对象上的方法和属性, 会被 new 构造函数() 创建出来的实例对象所继承</p><p>​    三、注意:</p><p>​      (1) 只要是函数就默认有 prototype 属性, 但非函数的对象是不具有的</p><p>​      (2) 定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p><h2 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h2><p>​    一、对象的原型</p><p>​    每个对象都默认有一个 <strong>proto</strong> 的属性, 它的值是一个对象, 默认指向创建这个对象的构造函数的原型</p><p>​    二、对象原型的访问特点</p><p>​     每个对象访问 <strong>proto</strong> 下的所有属性和方法，可以省略<strong>proto</strong></p><p>​    三、对象上读取属性的顺序</p><p>​      先从自身的属性上进行查找，如果没有再去 <strong>proto</strong> 属性指向的对象上去查找（就近原则）</p><h2 id="构造函数、对象原型、实例的关系"><a href="#构造函数、对象原型、实例的关系" class="headerlink" title="构造函数、对象原型、实例的关系"></a>构造函数、对象原型、实例的关系</h2><p>​    1. 每个构造函数都有一个 prototype 属性, 只要是这个构造函数生成的实例对象, 都会继承 prototype 的属性</p><p>​    2. 每个对象都有一个 <strong>proto</strong> 属性，指向创建对象时构造函数的原型对象 prototype; </p><p>​    3. 每个原型对象上默认都有一个 constructor 属性，它指向构造函数本身</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>  原型链理解（面试常问）</p><p>  每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向创建它的构造函数的原型对象（prototype ）。</p><p>  该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的对象原型为 null。</p><p>  注意: 根据定义，null 没有原型，并作为这个原型链中的最后一个环节</p><p>​    第二点: 对象访问属性时遵从原型链的顺序</p><p>​    (1) 当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>​    (2) 如果没有找到就从它的原型对象（__proto__）中查找</p><h2 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h2><h3 id="扩展原型对象的方法"><a href="#扩展原型对象的方法" class="headerlink" title="扩展原型对象的方法"></a>扩展原型对象的方法</h3><p>​    原型链的应用：拓展内置对象上自定义方法</p><ol><li><p>需求：修改数组 Array 上的原型对象，添加自定义求和的方法</p></li><li><p>拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法</p><p>注意：内置对象（如：Object, Array, Function） 上的原型对象不允许进行覆盖，只允许修改</p></li></ol><h2 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h2><p>​      es6 之前构造函数的特点:</p><p>​      1. 构造函数默认有一个 prototype 属性, 它的值是一个对象</p><p>​      2. 构造函数 prototype 属性下有 constructor 和 <strong>proto</strong> 两个默认的属性</p><p>​      3. 构造函数可以通过在 prototype 上添加方法, 去实现所有实例继承</p><p>​      4. 构造函数创建的实例上 __proto__指向创建它构造函数的 prototype</p><p>​      class 类的本质其实就是一个改造版的构造函数</p><h2 id="ES5数组新增方法"><a href="#ES5数组新增方法" class="headerlink" title="ES5数组新增方法"></a>ES5数组新增方法</h2><ol><li>forEach() 方法可以快速地遍历数组</li></ol><p>​    参数：callback(元素, 索引, 数组本身)</p><p>​    返回值：无</p><p>​    例子: 使用 forEach 对数组求和</p><ol start="2"><li>filter() 方法从数组筛选出符合条件的一组元素</li></ol><p>​    参数：callback(元素, 索引, 数组本身)</p><p>​    返回值：新数组</p><p>​    例子: 使用 filter 筛选数组中所有偶数</p><ol start="3"><li>some() 方法用于查找数组中是否有符合条件的某一个元素</li></ol><p>​    参数：callback(元素, 索引, 数组本身)</p><p>​    返回值：true(找到) || false(找不到)</p><p>   4.every() 方法用于查找数组中是否所有的元素都符合条件</p><p>​    参数：callback(元素, 索引, 数组本身)</p><p>​    返回值：true || false (只有有一个不满足就返回 false)</p><h2 id="Object-defineProperty方法"><a href="#Object-defineProperty方法" class="headerlink" title="Object.defineProperty方法"></a>Object.defineProperty方法</h2><p>​      (1) value: 属性值 </p><p>​      (2) writable: 是否可以修改</p><p>​      (3) enumerable: 是否可以枚举（遍历到）</p><p>​      (4) configurable: 是否可以删除或再次修改特性</p><p>​      三个属性描述符默认都是 false </p><h2 id="手动改变this指向"><a href="#手动改变this指向" class="headerlink" title="手动改变this指向"></a>手动改变this指向</h2><p>​    一、call 方法</p><p>​      fn.call([thisArg, arg1, arg2…])</p><p>​      作用：调用一个函数，并指定调用时 this 的值</p><p>​      参数: thisArg 函数中 this 的指定值； arg1, arg2…可选的参数列表</p><p>​      返回值：函数调用的结果</p><p>​    注意</p><p>​      第一个参数 thisArg 如果不传或是 null、undefined，默认函数内 this 指向 window </p><p>​    二、apply 方法</p><p>​      fn.apply(thisArg[, argsArray])</p><p>​      作用：调用一个函数，并指定调用时 this 的值</p><p>​      参数: thisArg 函数中 this 的指定值； argsArray 可选的参数数组(!!)</p><p>​      返回值：函数调用的结果</p><p>​    apply 应用</p><p>​      由于可以接受一个参数数组，所以对于数组元素的遍历操作可以使用 apply;</p><p>​      在可以使用 call 的情况下， 都可以使用 apply 替代 </p><p>​    三、bind 方法</p><p>​      var newFn = fn.bind(thisArg[, arg1, arg2, …])</p><p>​      作用：基于原函数创建一个新函数，这个新函数的 this 被指定为第一个参数， 其余参数作为实参传递给新函数</p><p>​      参数：thisArg 是新函数内 this 的预设值; arg1, arg2 是新函数预设传入的参数</p><p>​      返回值: 新函数</p><p>​    bind 作用</p><p>​      (1) 创建一个函数，不论怎么调用，这个函数都有同样的 this 值</p><p>​      (2) 使一个函数拥有预设的初始参数 </p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>​    一、什么是严格模式 （了解）</p><p>​      采用具有限制性JavaScript变体的一种方式，摆脱了以前的松散模式</p><p>​      1. 消除了 js 代码的不合理和不严谨地方，减少怪异行为</p><p>​      2. 消除了代码的不安全地方，保证代码安全运行</p><p>​      3. 提高编译器的效率，增加运行的速度</p><p>​      4. 禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等</p><p>   严格模式的应用</p><p>​      1. 为整个 js 文件开启严格模式, 即在代码开头添加 ‘use strict’;</p><ol start="2"><li>为某个函数开启严格模式, 即函数体代码开头添加 ‘use strict’; </li></ol><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>​    一、闭包的概念 </p><p>​      内部函数访问外部函数声明的变量，这种组合方式就是闭包</p><p>​    二、JS 中的垃圾回收机制(GC)</p><p>​      垃圾回收机制会定期（周期性）找出那些不再引用到的内存（变量），然后释放其内存</p><p>​    三、闭包产生的原因</p><p>​     (1) 当一个函数内的声明的变量没有被其他函数引用时，那么调用完这个函数后，</p><p>​      所有的局部变量就会被垃圾回收机制清除；</p><p>​     (2) 一旦这个变量被另外一个函数所引用，这个变量的值会始终保存在内存中，</p><p>​      不会被垃圾回收机制回收，从而形成了闭包 </p><p>​    一、闭包的作用</p><p>​      （1）延伸了变量的使用范围</p><p>​      （2）实现了数据的封装</p><p>​      （3）实现了数据的缓存（函数的柯里化）</p><p>​    二、闭包的缺点 (了解)</p><p>​      (1) 闭包会使得函数中的变量都被保存在内存中，加大了内存消耗 (空间换时间)</p><p>​      (2) 容易引发内存泄漏 (内存没有及时清理)</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>​    一、递归函数</p><p>​      函数内部自己调用自己，作用和循环效果类似 </p><p>​    二、递归的注意事项</p><p>​      递归很容易发生 “栈溢出” 错误，所以和 while 循环类似必须要添加中断条件 </p><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>​    一、浅拷贝</p><p>​      只拷贝对象一层的数据，复杂数据类型只拷贝内存地址值（引用同一个对象） </p><p>  一、深拷贝</p><p>​      拷贝对象多层的数据，遇到复杂数据类型会继续新建一个空间，拷贝里面每一层的属性和值</p><p>  二、和浅拷贝的区别</p><p>​    深拷贝后的对象和原对象是完全隔离的，各自互不影响， 而浅拷贝中所有复杂数据类型的值，都是共同引用的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于如何建立博客步骤</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<ol><li>安装全局的 hexo-cli 包</li><li>初始化 Blog 项目</li><li>创建 github 仓库</li><li>配置本地项目和 github 仓库相关联</li><li>选择一款皮肤</li><li>重新启动</li><li>修改主题配置</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
